function f1(arr: integer[], arr2: integer[1][2], size: float, name: id) => void
{
  arr[2][4 * 5][5] = 3;
  hello(a, b[2][2][2]);
  f(f2(), 1 + b);
}
function f3() => integer
{
  localvar counter: integer;
  localvar list: integer[5];

  hello(a, b[2][2][2]);

  localvar object: Object(1, 2);
  localvar average: float;

  f(f2(), 1 + b);

  localvar values: float[1][2];
}
function f4() => float
{
  if(a == 1) then {} else {};

  if(a > 1) then read(a); else {};

  if(a < 1) then {
    write(a);
  } else {
    return(b);
  };

  while(counter < 5) {};

  while(counter > 2) read(counter);;

  while(counter >= 9.9) {
    write(counter);
    return (counter);
  };

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
  return (result);
}
function f5() => id
{
  var[2 * (0+5-6) * (-1)][2][5].func(not b).arr[5-4].value.otherFunc(5.6*8.4/(4.2-6.3));
}

function f6() => integer
{
  a.b(c);
  g(h).i = 1;
  j(k).l();
  m.n[o] = 2;
  p[q].r = 3;
  s[t].u[v] = 4;

  a.b[c][d] = 1;
  e[f][g].h = 2;
  i[j][k].l[m][n] = 3;
  o(p).q[r] = 4;
  s(t).u[v][w] = 5;
}
class QUADRATIC isa POLYNOMIAL, SHAPE {
  private attribute a: float;
  private attribute b: float;
  private attribute c: float;
  public  constructor: (A: float, B: float, C: float);
  public  function evaluate: (x: float) => float;
};

class QUADRATIC isa POLYNOMIAL, SHAPE {
  private attribute a: float;
  private attribute b: float;
  private attribute c: float;
  public  constructor: (A: float, B: float, C: float);
  public  function evaluate: (x: float) => float;
};

class LINEAR isa POLYNOMIAL {
  private attribute a: float;
  private attribute b: float[][];
  public  constructor: (A: float[2], B: float);
  public  function evaluate: (x: float[2]) => float;
};

class NONE {};


function QUADRATIC::evaluate(x: float) => float
{
  localvar result: float;
  //Using Horner's method
  result = a;
  result = result * x + b;
  result = result * x / c;
  return (result);
}

function QUADRATIC::constructor(A: float, B: float, C: float)
{
  self.a = A;
  self.b = B;
  self.c = C;
}

function LINEAR::constructor(A: float[], B: float) 
{
  self.a = A;
  self.b = B;
}

/*
    classes
    --------------------------------------
|X| no class declaration
|X| class declaration
|x| multiple class declarations
|x| no data member declaration
|x| data member declaration
|x| multiple data member declaration
|x| no member function declaration
|x| member function declaration
|x| multiple member function declaration
|x| no member
|x| no inherited class
|x| one inherited class
|x| multiple inherited classes
|x| private member specifier
|x| public member specifier

    functions: definitions
    --------------------------------------
|X| no main function definition
| | main function definition
|X| no free function definition
|X| free function definition
|x| multiple free function definitions
|x| no member function definition
|x| member function definition
|x| multiple member function definitions
|X| return type: void
|X| return type: integer
|X| return type: float
|X| return type: id
|x| return type: array (not allowed)

    functions: formal parameters
    --------------------------------------
|X| type: integer
|X| type: float
|X| type: id
|X| type: 1-dim array 
|X| type: n-dim array
|X| type: array (with size)
|X| type: array (without size)

    functions: calls
    --------------------------------------
|X| free function call
|X| member function call
|X| parameters:0
|X| parameters:1
|X| parameters:n
|X| array parameter - 1-dim
|x| array parameter - n-dim
|x| array parameter - with size
|x| array parameter - without size (throws error)
|x| function call as statement
|X| function call as expression factor
|x| expression as parameter

    variable declaration
    --------------------------------------
|x| type: integer
|x| type: float
|X| type: id
|x| type: 1-dim array 
|X| type: n-dim array
|X| type: array (with size)
|X| type: array (without size)

    function body: local variable declarations
    --------------------------------------
|X| no local variable declarations
|X| local variable declarations
|x| intertwined statements and variable declarations

    function body: statements
    --------------------------------------
|X| no statement
|X| 1 statement
|X| n statements
|x| if statement
|x| if: empty then or else blocks
|x| if: 1-statement then or else blocks
|x| if: n-statements then or else blocks
|x| while statement
|x| while: empty block
|x| while: 1-statement block
|x| while: n-statement block
|x| read(<variable>) statement
|x| write(<expr>) statement
|x| return(<expr>) statement
|X| assignment statement

    variable + idnest
    --------------------------------------
|X| id
|X| id.id
|x| id.id(id)
|x| id(id).id
|x| id(id).id()
|x| id.id[id]
|x| id[id].id
|x| id[id].id[id]
|x| id.id[id][id]
|x| id[id][id].id
|x| id[id][id].id[id][id]
|x| id(id).id[id]
|x| id(id).id[id][id]
|x| expression as array index
 
    expressions
    --------------------------------------
|x| single variable
|x| involving addop
|x| involving multop
|x| involving relop
|x| involving addop + multop
|x| involving multop + relop
|x| involving addop + multop + relop
|x| involving parentheses
|x| involving nested parenhteses
|x| involving not
|x| involving sign
|x| involving literals
|x| involving variable + idnest
|x| involving function calls
|x| involving all the above in one expression

*/