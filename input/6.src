// ====== Class declarations ====== //
class POLYNOMIAL {
	public function evaluate: (x: float) => float;
	public function evaluate2: (x: float) => float;                       // 6.2
  public attribute shadow: integer;                     // 8.6
};
class POLYNOMIAL {                                                      // 8.1
	public function evaluate: (x: float) => float;                        
  public function evaluate: (x: integer) => integer;                    // 9.2
  public attribute shadow: integer;                     // 8.6
};
class LINEAR isa POLYNOMIAL {
	private attribute a: float;
	private attribute b: float;
	private attribute b: integer;                                       // 8.3

  public attribute shadow: integer;                     // 8.6
	
	public constructor: (A: float, B: float);
	public function evaluate: (x: float) => float;                      // 9.3
};

class QUADRATIC isa POLYNOMIAL {
	private attribute a: float;                                         // 8.5
	private attribute b: float;                                         // 8.5
	private attribute c: float;
	
	public constructor: (A: float, B: float, C: float);
	public function evaluate: (x: float) => float;                      // 9.3
};

class C isa E {
	private attribute a: integer; 
};

class D isa C {
	private attribute b: integer; 
  private attribute circular: E;      // 14.1

};

class E isa D {                                                         // 14.1
	private attribute c: integer; 
  private attribute circular: D;      // 14.1
};


// ====== member function implementations ====== //
function POLYNOMIAL::evaluate(x: float) => float
  {
    return (0);
  }


function LINEAR::constructor(A: float, B: float)
  {
    localvar new_function: LINEAR;
    new_function.a = A;
    new_function.b = B;
    return (new_function);
  }
  
function LINEAR::evaluate(x: float) => float 
  {
    localvar result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }

function QUADRATIC::evaluate(x: float) => float
  {
    localvar result: float;
    //Using Horner's method
    result = a;
    result = result * x + b;
    result = result * x + c;
	result = self.a;
	result = a.self;                                                       // 15.2
    return (result);
  }
  
function QUADRATIC::constructor(B: float, C: float)
  {
    localvar new_function: QUADRATIC ;
    new_function.a = A + B * 3;                                            // 10.1
    new_function.b = B;
    new_function.c = 1;                                                    // 10.2 
    return (1);                                                            // 10.3
  }
  
function QUADRATIC::build2(A: float, B: float, C: float) => QUADRATIC      // 6.1
  {
    localvar new_function: QUADRATIC;
    new_function.a = A;
    new_function.b = B;
    new_function.c = C;

    localvar a: integer; // 8.7

    undeclared = 1;                 // 11.2

    return (new_function);
  }
  
function f(i: integer) => void {}                                                    
function f(i: integer) => void {}                                          // 8.2
function f(i: integer, j: integer) => integer {}                           // 9.1

function f3(p1: integer[2][3]) => integer {}


// ====== main ====== //
function main() => void
{
  localvar a: a;                                                           // 11.5
  localvar c: C;
  localvar f1: LINEAR;
  localvar f2: QUADRATIC;
  localvar counter: integer;
  localvar counter: float;                                                 // 8.4
  localvar i: integer[2][3];
  localvar j: integer[1][2][3];
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);

  undeclared = 1;                 // 11.2

  f2.a; // 8.5


  c.b = 1;                                                                 // 11.2
  counter = c.f();                                                         // 11.3
  undefined();                                                             // 11.4
  counter = a;                                                             // 11.1
  f(1,1,1);                                                                // 12.1
  f(1.2,1);                                                                // 12.2	
  i[2] = 1;                                                                // 13.1
  i[2][1.3] = 2;                                                           // 13.2
  f3(j);                                                                   // 13.3
  counter.x = 1;                                                           // 15.1
  counter = self;                                                          // 15.2
  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
}

