statement -> statementTail
statement -> 'if' '(' relExpr ')' 'then' statBlock 'else' statBlock ';' 
statement -> 'while' '(' relExpr ')' statBlock ';' 
statement -> 'read' '(' variable ')' ';' 
statement -> 'write' '(' expr ')' ';' 
statement -> 'return' '(' expr ')' ';' 

statementTail -> experiment reptindice assignOp expr ';' 
statementTail -> stateFuncCall

stateFuncCall -> 'id' '(' aParams ')' '.' stateFuncCall
stateFuncCall -> 'id' reptindice '.' stateFuncCall
stateFuncCall -> 'id' '.' stateFuncCall
stateFuncCall -> 'id' ';'
stateFuncCall -> 'id' '(' aParams ')' ';'

stateVariable -> 'id' '(' aParams ')' '.' stateVariable
stateVariable -> 'id' reptindice '.' stateVariable
stateVariable -> 'id' '.' stateVariable
stateVariable -> 'id' assignOp
stateVariable -> 'id' reptindice assignOp

experiment -> 'id' extend

extend -> indice reptindice  '.' experiment
extend -> '(' aParams ')' '.' experiment
extend -> '.' experiment
extend -> EPSILON

factor -> variable 
factor -> functionCall 
factor -> 'intnum' 
factor -> 'floatnum' 
factor -> '(' arithExpr ')' 
factor -> 'not' factor 
factor -> sign factor 

assignStat -> variable assignOp expr 

variable -> experiment reptindice 

functionCall -> experiment '(' aParams ')'  

expr -> arithExpr exprTail

exprTail -> EPSILON
exprTail -> relOp arithExpr 

relExpr -> arithExpr relOp arithExpr 

arithExpr -> term rightrec-arithExpr 

statBlock -> '{' rept-statBlock1 '}' 
statBlock -> statement 
statBlock -> EPSILON 

rept-statBlock1 -> statement rept-statBlock1 
rept-statBlock1 -> EPSILON 

term -> factor rightrec-term 

rightrec-term -> EPSILON 
rightrec-term -> multOp factor rightrec-term 

assignOp -> '=' 

variable -> experiment reptindice 

reptindice -> indice reptindice 
reptindice -> EPSILON 

indice -> '[' arithExpr ']' 

reptidnest -> idnest reptidnest 
reptidnest -> EPSILON 

rightrec-arithExpr -> EPSILON 
rightrec-arithExpr -> addOp term rightrec-arithExpr 

addOp -> '+' 
addOp -> '-' 
addOp -> 'or' 

sign -> '+' 
sign -> '-' 

multOp -> '*' 
multOp -> '/' 
multOp -> 'and' 

relOp -> 'eq' 
relOp -> 'neq' 
relOp -> 'lt' 
relOp -> 'gt' 
relOp -> 'leq' 
relOp -> 'geq'

idnest -> 'id' idnestTail

idnestTail -> reptindice '.' 
idnestTail -> '(' aParams ')' '.' 